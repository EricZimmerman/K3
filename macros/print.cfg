[gcode_macro PRINT_START]
gcode: 
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default(0)|int %}
	{% set start_chambertemp = target_chamber - 10 %}
  	{% set material = params.MATERIAL|default("")|string %}
  	{% set filament = params.FILAMENT|default("")|string %}
  	{% set nozzle = params.NOZZLE|default(0.4)|float %}

	_ADJUST_PRESSURE_ADVANCE FILAMENT="{filament}" NOZZLE={nozzle} MATERIAL="{material}"

    #lights up
    SET_LED LED=chamber GREEN=1 RED=1 BLUE=1 WHITE=1

    BED_MESH_CLEAR
    
	SET_VELOCITY_LIMIT VELOCITY=800 ACCEL=25000
	M204 S15000 #set starting accel

    G28 METHOD=PROXIMITY # Home using proximity to get close to avoid the slow creep down when z is high

    G28 Z METHOD=CONTACT CALIBRATE=0 #Contact for true z
    G90                   # Absolute position
  
    G0 Z2   ; position beacon at 2mm for heat soak
    
	#CANCEL_COOLDOWN

    # if bed is within 10%, dont wait around
    {% set current_bed_temp = printer.heater_bed.temperature %}
    {% set tolerance_percentage = 0.10 %}  # 10% tolerance
    {% set lower_bound = target_bed * (1 - tolerance_percentage) %}

    {% if current_bed_temp < lower_bound %}
        RESPOND MSG="Bed temp outside 10% tolerance. Heating..."
        
        M190 S{target_bed}  ; Wait for bed to reach target temperature

        RESPOND MSG="Bed preheated!"
    {% else %}
        # make sure we still set where we want it to be eventually, but do not wait
        M140 S{target_bed}  ; Set bed target temperature
        RESPOND MSG="Bed already within 10% of {target_bed}C"
    {% endif %}


    #RESPOND MSG="Heating bed to temp: {target_bed}c"           # Displays info
    #M190 S{target_bed}  #bed to target
    #M106 S51 # Turns on the PT-fan
	
    {% if params.CHAMBER|default(0)|int > 0|int %}
      SET_CHAMBER CHAMBER_TEMP={target_chamber}
    {% endif %}

    # For pps, wait until its the chamber temp always, vs starting early
    {% if material == 'PPS-CF' %}
      {% set start_chambertemp = target_chamber %}
    {% endif %}

    RESPOND MSG="Waiting for chamber to reach (on Chamber Heater): {start_chambertemp}c"           # Displays info
    # Chamber heater
    SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={start_chambertemp}
	{% if start_chambertemp > 10 %}
      TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM={start_chambertemp}   ; wait for chamber temp
    {% else %}
      TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM=0   ; wait for chamber temp
    {% endif %}
  #  RESPOND MSG="Waiting for chamber to reach (on Chamber Heater): {target_chamber}c"           # Displays info
  #  TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM={target_chamber}
    # Chamber heater end
    
    #TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Left" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
  
    #RESPOND MSG="Bed target temp: {target_bed}c"           # Displays info
   # M140 S{target_bed}    #M190 makes it wait
    
	#HEATSOAK BED={bed} HOTEND=160 CHAMBER={chamber} WAIT=1
    
  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    RESPOND MSG="Hotend: 150c"          # Displays info
    M109 S150       
	
	RESPOND MSG="Calibrating"
	G28 Z METHOD=CONTACT CALIBRATE=1
	Z_TILT_ADJUST
    
	BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2

    G28 Z METHOD=CONTACT CALIBRATE=0

    M107                                                          # Turns off partcooling fan
    RESPOND MSG="Hotend target: {target_extruder}c"             # Displays info
    M104 S{target_extruder}                    ; set extruder to print temp
    M109 S{target_extruder}                    ; wait for extruder temp

    SET_GCODE_OFFSET Z=0.093     ; add a little offset for hotend thermal expansion. needs fine tuning, long meltzones require more
    
    {% if material == 'PPS-CF' %}
      RESPOND MSG="Adjusting Z offset for PPS-CF"
      SET_GCODE_OFFSET Z_ADJUST=0.07 MOVE=1
    {% endif %}

    {% if material == 'ezPC-CF' %}
      RESPOND MSG="Adjusting Z offset for eZPC-CF"
      SET_GCODE_OFFSET Z_ADJUST=0.07 MOVE=1
    {% endif %}

	#SET_GCODE_OFFSET Z={(hotend-160)/1425}
    #SET_GCODE_OFFSET Z=0.005
	
	#M106 S0 #set fan speed
	
	#WIPE_NOZZLE
	
	RESPOND MSG="Printer goes brr"          # Displays info
	RESPOND MSG="Purging"
	SQUIGGLY_PURGE
	#PURGE_LINE HOTEND={target_extruder}
	
	RESPOND MSG="Printing"


[gcode_macro PRINT_END]
gcode: 
	RESPOND MSG="Done"

    RESET_VELOCITY_LIMIT
    CLEAR_ACTIVE_SPOOL
    
	#COOLDOWN
	BED_MESH_CLEAR
	
	M400
	G91
	
	G1 E-0.5 F3600
	
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
	
	{% if printer.toolhead.position.x < (max_x - 20) %}
	{% set x_safe = 20.0 %}
	{% else %}
	{% set x_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.y < (max_y - 20) %}
	{% set y_safe = 20.0 %}
	{% else %}
	{% set y_safe = -20.0 %}
	{% endif %}
	
	{% if printer.toolhead.position.z < (max_z - 50) %}
	{% set z_safe = 50.0 %}
	{% else %}
	{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}
	
	G0 X{x_safe} Y{y_safe} Z{z_safe} F30000
	
	SET_GCODE_OFFSET Z=0
	TURN_OFF_HEATERS
	PARK_NOZZLE
	
	G1 E-24.0 F4800 #14 conduction, 10 air
	
	#WIPE_NOZZLE CYCLES=1
	
	# M106 S128
	# G4 P30000
	
	#WIPE_NOZZLE
	
	G92 E0
	M107

# [gcode_macro PURGE_LINE]
# gcode:
# 	{% set hotend = params.HOTEND|int %}
	
# 	G90
	
# 	#G1 X-0.5 Y0.5 Z0.4 F8000
#     G1 X1 Y1 Z0.4 F8000
# 	M104 S{hotend}
# 	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend}
	
# 	G91
# 	G1 E13 F200
# 	G1 Y20 E3 F1200
	
# 	G1 Y120 E27 F1200
# 	G1 X0.8
# 	G1 Y-10 E2 F1200
# 	G1 X0.8
	
# 	G92 E0
# 	G90

# [gcode_macro PURGE_LINE_INTO_BUCKET]
# gcode: 
# 	{% set hotend = params.HOTEND|int %}
# 	{% set cycles = params.CYCLES|int %}
	
# 	SAVE_GCODE_STATE NAME=PURGELINEINTOBUCKET
	
# 	PARK_NOZZLE
# 	M104 S{hotend}
# 	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={hotend}
	
# 	M83
# 	{% for i in range(cycles) %}
# 	G1 E20 F300
# 	WIPE_NOZZLE CYCLES=1
# 	{% endfor %}
	
# 	RESTORE_GCODE_STATE NAME=PURGELINEINTOBUCKET


[gcode_macro SQUIGGLY_PURGE]
gcode:
    # Mathematical constants
    {% set TAU = 6.28318 %}
    {% set PI = 3.14159 %}
    {% set FACTORIALS = [1, 2, 24, 720, 40320, 3628800, 479001600, 87178291200, 20922789888000] %}
    
    # Base macro parameters
    {% set prime_line_steps = params.STEPS|default(16)|int %}
    {% set prime_line_periods = params.PERIODS|default(10)|int %}
    {% set prime_line_amplitude = params.AMPLITUDE|default(5.0)|float %}
    {% set prime_line_period_length = params.PERIOD_LENGTH|default(5.0)|float %}
    {% set prime_line_purge_distance = params.PURGE_LENGTH|default(100.0)|float %}
    {% set prime_line_flowrate = params.FLOWRATE|default(10.0)|float %}
    {% set prime_line_height = params.LINE_HEIGHT|default(0.6)|float %}
    {% set prime_line_unretract_length = params.UNRETRACT_LENGTH|default(5.0)|float %}
    {% set prime_line_direction = params.LINE_DIRECTION|default("X")|string|upper %}
    {% set prime_line_margin = params.LINE_MARGIN|default(10.0)|float %} # Used only in adaptive mode
    {% set prime_line_adaptive = params.ADAPTIVE_MODE|default(1)|int %}
    {% set verbose = params.VERBOSE|default(1)|int %}

    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    {% set coordinates_found = False %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinates_found = True %}
    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
            # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinates_found = True %}
        {% endif %}
    {% endif %}

    # We get the default prime line position parameters
    {% set prime_line_x = params.START_X|default(5.0)|float %}
    {% set prime_line_y = params.START_Y|default(3.5)|float %}
    {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2]|map("float") %}

    # Account for the amplitude (height) of the purge line
    {% if prime_line_direction == "X" %}
        {% set offset_x, offset_y = 0, prime_line_amplitude/2 %}
    {% else %}
        {% set offset_x, offset_y = prime_line_amplitude/2, 0 %}
    {% endif %}

    # If first layer coordinates are retrieved and adaptive mode is enabled, then we replace the coordinates to
    # do an adaptive purge while being careful to have the line stay on the bed when the first layer
    # is in an opposite bed quadrant than the prime line initial coordinates (due to mirrored coordinates from center axes)...
    {% if coordinates_found and prime_line_adaptive == 1 %}
        {% set prime_line_x = 2*center_x - prime_line_x if (prime_line_x > center_x and xMaxSpec < center_x) or (prime_line_x < center_x and xMinSpec > center_x) 
                               else prime_line_x %}
        {% set prime_line_y = 2*center_y - prime_line_y if (prime_line_y > center_y and yMaxSpec < center_y) or (prime_line_y < center_y and yMinSpec > center_y) 
                               else prime_line_y %}
        {% set prime_line_x = [[prime_line_x, xMinSpec - prime_line_margin - offset_x]|max, xMaxSpec + prime_line_margin + offset_x]|min %}
        {% set prime_line_y = [[prime_line_y, yMinSpec - prime_line_margin - offset_y]|max, yMaxSpec + prime_line_margin + offset_y]|min %}
    {% endif %}

    # Choose the way of printing the primeline (in + or -) alongside the direction to avoid going outside the bed boundaries
    {% set prime_line_way = -1 if (prime_line_direction == "X" and prime_line_x > center_x) or (prime_line_direction == "Y" and prime_line_y > center_y) else 1 %}

    # Calculate steps
    {% set steps = [] %}
    {% set state = namespace(cur_y=prime_line_y, prime_line_length=0.0, cos=0.0) %}

    {% for step in range(1, prime_line_periods * prime_line_steps + 1) %}
        {% set sign = cycler(1.0, -1.0) %}
        {% set state.cos = 0.0 %}
        {% set rad_angle = step / prime_line_steps * TAU %}
        {% for i in range(0, FACTORIALS|length) %}
            {% set cos_step = sign.next() * ((rad_angle%TAU)**(2*i) / FACTORIALS[i]) %}
            {% set state.cos = state.cos + cos_step %}
        {% endfor %}
        {% set dist_x = step * prime_line_period_length / prime_line_steps %}
        {% set dist_y = prime_line_amplitude * (0.5 - (0.5 * state.cos)) %}
        {% set rel_x = prime_line_period_length/prime_line_steps %}
        {% set rel_y = prime_line_y + dist_y - state.cur_y %}
        {% set e_length = (rel_x**2 + rel_y**2)**0.5 %}
        {% set state.cur_y = state.cur_y + rel_y %}
        {% set state.prime_line_length = state.prime_line_length + e_length %}
        {% set _ = steps.append((rel_x, rel_y, e_length)) %}
    {% endfor %}
    
    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    {% set filament_area = PI * (filament_diameter / 2)**2 %}
    
    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * filament_area %}
    {% set line_width = purge_volume / (prime_line_height * state.prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (prime_line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * state.prime_line_length) / filament_area %}
        {% set purge_volume = prime_line_purge_distance * filament_area %}
        {% set line_width = purge_volume / (prime_line_height * state.prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (prime_line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {action_raise_error("The prime line will be too thin %.4f x %.4f and will probably not stick properly to the bed. Increase its purge distance or decrease its length!" % (prime_line_height, line_width))}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 |float %}

    G91
    M83
    {% if (printer.toolhead.position.z < 5) %}
        G1 Z5 F600
    {% endif %}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F18000

    # Add some extra squish to the prime line 
    G1 Z{prime_line_height*0.8} F600

    # Add pressure in the nozzle
    G92 E0
    G1 E{prime_line_unretract_length} F300

    # Prime line
    G92 E0
    G91
    {% if prime_line_direction == "X" %}
        {% for x,y,e in steps %}
            G1 X{x*prime_line_way} Y{y} E{e/state.prime_line_length*prime_line_purge_distance} F{speed}
        {% endfor %}
    {% elif prime_line_direction == "Y" %}
        {% for y,x,e in steps %}
            G1 X{x} Y{y*prime_line_way} E{e/state.prime_line_length*prime_line_purge_distance} F{speed}
        {% endfor %}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}
    G90
    
    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F600

    # Additional small movement to get out of the line as some slicers directly emmit
    # a Z- move as a first step that make the toolhead crash back in the line and get dirty
    G91
    G1 X5 Y5 F18000
    G90
    
    # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
    M400


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode: 
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE
	PRINT_END

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
gcode:
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	G90
	PARK_NOZZLE
	SAVE_GCODE_STATE NAME=PAUSEPARK
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_etemp: 0
variable_m600: 0
gcode: 
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	
	{% if m600 > 0 %}
	LOAD_FILAMENT
	PARK_NOZZLE
	M83
	G1 E25 F300
	WIPE_NOZZLE
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=m600 VALUE=0
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=500
	G91
	M83
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=500
	BASE_RESUME
	{% endif %}

[gcode_macro PREHEAT]
description = Preheat
gcode: 
	{% set hotend = params.HOTEND|default(0)|int %}
	{% set bed = params.BED|default(0)|int %}
	
	M104 S{hotend}
	M140 S{bed}
	M106 S128

[gcode_macro M600]
gcode: 
	SAVE_GCODE_STATE NAME=M600
	UNLOAD_FILAMENT
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=m600 VALUE=1
	PAUSE
	RESTORE_GCODE_STATE NAME=M600

[gcode_macro HEATSOAK]
variable_beacon_tolerance: 10
gcode: 
	{% set bed = params.BED|default(110)|int %}
	{% set hotend = params.HOTEND|default(160)|int %}
	{% set chamber = params.CHAMBER|default(50)|int %}
	{% set wait = params.WAIT|default(0)|int %}
	
	PREHEAT HOTEND={hotend} BED={bed}
	
	#CONDITIONAL_HOME
    G28
	
	RESPOND MSG="Heating"
	
	G90
	G1 X90 Y90 Z2 F3600
	M106 S128
	
	{% if wait != 0 %}
	M190 S{bed}
	TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber_Left" MINIMUM={chamber}
	{% endif %}


[gcode_macro CONDITIONAL_HOME]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="Homing"
	G28
	{% endif %}

# [gcode_macro COOLDOWN]
# gcode: 
# 	CANCEL_COOLDOWN
# 	SET_FAN_SPEED fan=filter_fan SPEED=1.0
# 	UPDATE_DELAYED_GCODE ID=COOLDOWN DURATION=10

# [gcode_macro CANCEL_COOLDOWN]
# gcode: 
# 	UPDATE_DELAYED_GCODE ID=COOLDOWN DURATION=0

# [delayed_gcode COOLDOWN]
# gcode: 
# 	{% if printer["heater_bed"].target:= 0.0 %}
# 	SET_FAN_SPEED fan=filter_fan SPEED=0.0
# 	{% endif %}

[gcode_macro LOAD_FILAMENT]
gcode: 
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83
	G1 E45 F2400
	RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode: 
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83
	
	{% set hotend_temp = printer.extruder.temperature %}
	{% if hotend_temp > 100 %}
	{% if hotend_temp > 200 %}
	PARK_NOZZLE
	
	{% for i in range(3) %}
	PURGE_FILAMENT LENGTH=20
	{% endfor %}
	G1 E20 F300
	G1 E-12 F2400
	G4 P2000
	{% else %}
	
	M104 S0
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=100
	{% endif %}
	{% endif %}
	
	G1 E-55 F2400
	{% if hotend_temp > 200 %}
	WIPE_NOZZLE
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro PURGE_FILAMENT]
gcode:
	{% set length = params.LENGTH|default(30)|int %}
	{% set fan_speed = printer.fan.speed %}
	
	SAVE_GCODE_STATE NAME=PURGEFILAMENT
	PARK_NOZZLE
	
	M83
	M106 S0
	
	G1 E{length} F300
	G1 E-1 F1800
	
	M106 S128
	G4 P1000
	
	M106 S{(fan_speed*255)|int}
	
	WIPE_NOZZLE
	
	RESTORE_GCODE_STATE NAME=PURGEFILAMENT

[gcode_macro COLD_PULL]
gcode: 
	SAVE_GCODE_STATE NAME=COLDPULL
	
	M83
	
	M109 S270
	G1 E100 F300
	M104 S90
	G1 E30 F60
	TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=95
	G1 E-100 F1000
	
	M104 S0
	
	RESTORE_GCODE_STATE NAME=COLDPULL

[gcode_macro PARK_NOZZLE]
description: Park the nozzle
gcode: 
	SAVE_GCODE_STATE NAME=PARKNOZZLE
	CONDITIONAL_HOME
	G90
	G0 X40 Y40 F30000
	RESTORE_GCODE_STATE NAME=PARKNOZZLE

[gcode_macro CENTER_NOZZLE]
description: Center the nozzle
gcode: 
	SAVE_GCODE_STATE NAME=CENTERNOZZLE
	CONDITIONAL_HOME
	G90
	G0 X90 Y90 F30000
	RESTORE_GCODE_STATE NAME=CENTERNOZZLE

[gcode_macro WIPE_NOZZLE]
gcode: 
	{% set cycles = params.CYCLES|default(7)|int %}
	SAVE_GCODE_STATE NAME=WIPENOZZLE
	PARK_NOZZLE
	G91
	{% for i in range(cycles) %}
	G1 Y20 F3000
	G1 Y-20 F3000
	{% endfor %}
	RESTORE_GCODE_STATE NAME=WIPENOZZLE


  